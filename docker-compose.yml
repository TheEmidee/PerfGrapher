version: "3"

services:
  ##########################
  ### SETUP SERVER CONTAINER
  ##########################
  server:
    # Tell docker what file to build the server from
    build: ./backend
    # The ports to expose
    expose:
      - 4000
    # Environment variables
    environment:
      - MONGO_URI=mongodb://${BACKEND_MONGO_INITDB_ROOT_USERNAME}:${BACKEND_MONGO_INITDB_ROOT_PASSWORD}@${BACKEND_MONGO_URI}
      - PORT=${BACKEND_PORT}
      - FILES_UPLOAD_FOLDER=${BACKEND_FILES_UPLOAD_FOLDER}
      - NODE_ENV=${BACKEND_NODE_ENV}
    # Port mapping
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    # Volumes to mount
    volumes:
      - ./backend/src:/app/backend/src
      - ./frontend/public/files:/app/files
    # Run command
    # Nodemon for hot reloading (-L flag required for polling in Docker)
    command: node src/server.js
    # Connect to other containers
    links:
      - db
    # Restart action
    restart: always
  ##########################
  ### SETUP CLIENT CONTAINER
  ##########################
  client:
    build: ./frontend
    environment:
      - REACT_APP_SERVER_URL=${REACT_APP_SERVER_URL}
    ports:
      - 80:80
    links:
      - server
    restart: always
  ##########################
  ### SETUP DB CONTAINER
  ##########################
  db:
    image: mongo
    ports:
      - ${BACKEND_MONGO_PORT}:${BACKEND_MONGO_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${BACKEND_MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${BACKEND_MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      # Map physical volume to virtual for data persistence
      # On server could be /data/db
      # For this case we will create a Docker volume and use it instead
      # You need to run docker volume create yourproject-dbdata
      - board-dbdata:/data/db
    restart: always

volumes:
  ? board-dbdata